--> UPDATE ROOM AVAILABILITY AND ROOM CHARGES ON
DISCHARGE:

CREATE OR replace TRIGGER room_management
  AFTER UPDATE ON records
  FOR EACH ROW
DECLARE
    rc             bill_details.room_charges%TYPE := 0;
    nd             NUMBER(10);
    patient_id     records.p_id%TYPE := : old.p_id;
    discharge_date records.dt_discharged%TYPE := : new.dt_discharged;
    previous_value records.dt_discharged%TYPE := : old.dt_discharged;
    r_id           room.room_id%TYPE;
    p_count        NUMBER(2);
BEGIN
    IF discharge_date IS NOT NULL
       AND previous_value IS NULL THEN
      SELECT r_cost
      INTO   rc
      FROM   room_type
      WHERE  type_id = (SELECT type_id
                        FROM   room
                        WHERE  room_id = (SELECT room_id
                                          FROM   room_info
                                          WHERE  p_id = patient_id));

      SELECT ( r_exit_date - r_entry_date )
      INTO   nd
      FROM   room_info
      WHERE  p_id = patient_id;

      UPDATE bill_details
      SET    room_charges = nd * rc
      WHERE  bill_id = (SELECT bill_id
                        FROM   bill
                        WHERE  p_id = patient_id);

      SELECT room_id
      INTO   r_id
      FROM   room_info
      WHERE  p_id = patient_id;

      IF r_id IN ( 1, 2, 3 ) THEN
        UPDATE room_info
        SET    room_status = 'vacant',
               p_id = 0,
               r_entry_date = NULL,
               r_exit_date = NULL
        WHERE  p_id = patient_id;
      ELSIF r_id IN ( 4, 5, 6, 7,
                      8, 9, 10 ) THEN
        SELECT Count(*)
        INTO   p_count
        FROM   room_info
        WHERE  room_id = r_id;

        IF p_count = 1 THEN
          UPDATE room_info
          SET    room_status = 'vacant',
                 p_id = 0,
                 r_entry_date = NULL,
                 r_exit_date = NULL
          WHERE  p_id = patient_id;
        ELSE
          DELETE FROM room_info
          WHERE  room_id = r_id;
        END IF;
      END IF;

      dbms_output.Put_line (
      'Patient has been discharged successfully, now room is vacant');
    END IF;
END; 

--> CHECK APPOINTMENT AVAILABILITY:

CREATE OR replace TRIGGER check_appointment_availability
  BEFORE INSERT OR UPDATE ON appointment
  FOR EACH ROW
DECLARE
    apt_count NUMBER;
BEGIN
    IF To_char(:NEW.apt_date_slot, 'mi') = 0 THEN
      SELECT Count(*)
      INTO   apt_count
      FROM   appointment
      WHERE  doc_id = :NEW.doc_id
             AND apt_date_slot = :NEW.apt_date_slot;

      IF apt_count >= 1 THEN
        Raise_application_error (-20001,
        'Doctor appointment slot is already booked by other.');
      END IF;
    ELSE
      Raise_application_error (-20006,
      'Only Perfect Hours Appointment can be selected');
    END IF;
END;

--> UPDATE TEST CHARGES ON NEW PRESCRIPTION:

CREATE OR replace TRIGGER update_test_charges
  BEFORE INSERT ON pres_test
  FOR EACH ROW
BEGIN
    UPDATE bill_details
    SET    test_charges = ( test_charges + :NEW.test_cost )
    WHERE  bill_id = (SELECT bill_id
                      FROM   bill
                      WHERE  p_id = (SELECT p_id
                                     FROM   prescription
                                     WHERE  pres_id = :NEW.pres_id));
END; 
